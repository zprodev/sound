{"version":3,"file":"MonoFilter.js","sources":["../../src/filters/MonoFilter.ts"],"sourcesContent":["import { getInstance } from '../instance';\nimport { Filter } from './Filter';\n\n/**\n * Combine all channels into mono channel.\n *\n * @memberof filters\n */\nclass MonoFilter extends Filter\n{\n    /** Merger node */\n    private _merger: ChannelMergerNode;\n\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n        const audioContext: AudioContext = getInstance().context.audioContext;\n        const splitter: ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger: ChannelMergerNode = audioContext.createChannelMerger();\n\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n\nexport { MonoFilter };\n"],"names":["Filter","getInstance"],"mappings":";;;;;AAQA,MAAM,mBAAmBA,aACzB,CAAA;AAAA,EAII,WACA,GAAA;AAAA,IAAA,IAAA,OAAA,GAAA,CAAA,GAAA,IAAA,KAAA;AAAA,MAAA,KAAA,CAAA,GAAA,IAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AACI,IAAI,IAAAC,oBAAA,GAAc,SAClB,EAAA;AACI,MAAA,OAAA,CAAM,IAAI,CAAA,CAAA;AAEV,MAAA,OAAA;AAAA,KACJ;AACA,IAAM,MAAA,YAAA,GAA6BA,oBAAY,EAAA,CAAE,OAAQ,CAAA,YAAA,CAAA;AACzD,IAAM,MAAA,QAAA,GAAgC,aAAa,qBAAsB,EAAA,CAAA;AACzE,IAAM,MAAA,MAAA,GAA4B,aAAa,mBAAoB,EAAA,CAAA;AAEnE,IAAA,MAAA,CAAO,QAAQ,QAAQ,CAAA,CAAA;AACvB,IAAA,OAAA,CAAM,QAAQ,QAAQ,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AAAA,GACnB;AAAA,EAEO,OACP,GAAA;AACI,IAAA,IAAA,CAAK,QAAQ,UAAW,EAAA,CAAA;AACxB,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,KAAA,CAAM,OAAQ,EAAA,CAAA;AAAA,GAClB;AACJ;;;;"}